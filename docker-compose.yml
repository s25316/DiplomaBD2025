version: '3'
services:
  Diploma_Kafka_To_Mongo_Broker:
    container_name: Diploma_Kafka_To_Mongo_Broker
    image: kafka_to_mongo_broker:latest
    build:
      context: .
      dockerfile: KafkaToMongoBroker/KafkaToMongoBroker/Dockerfile
    restart: unless-stopped
    depends_on:
      - Diploma_BackEnd_Api
    environment:
      KafkaConnectionString: "Diploma_Kafka:9092"
      KafkaTopics: "user-logs"
      KafkaMaxBatchSizeMB: "1"
      KafkaMaxPollIntervalSeconds: "30"
      MongoConnectionString: "mongodb://myuser:mypassword@Diploma_MongoDb:27017/"
      MongoDatabase: "DiplomaDB"
    init: true
    stop_signal: SIGINT
    stop_grace_period: 30s

  Diploma_BackEnd_Api:
    container_name: Diploma_BackEnd_Api
    image: diploma_backend_api:latest
    build:
      context: .
      dockerfile: BackEndAPI/BackEndAPI/Dockerfile
    ports:
      - "8080:8080"
    restart: unless-stopped
    depends_on:
      - Diploma_MsSQL
      - Diploma_MongoDb
      - Diploma_Redis
      - Diploma_Kafka
    environment:
      Authentication__Secret: "KdKSpSy?ZDU8hD{hyRym43HdrSbc*SE8eh)#]$%LqN*r=W_d9z=zcR1$g-3n,%xwyVZNF-{_2RyPU_pPyR9/1*KEtaE})M@9rP5LkyfaZic%$vq$t(e@}0R6?"
      Authentication__Issuer: "JuniorBase"
      Authentication__Audience: "JuniorBase"

      ConnectionStrings__RelationalDatabase: "Data Source=Diploma_MsSQL,1433;Initial Catalog=DiplomaBD;Persist Security Info=True;User ID=sa;Password=YourStrong!Passw0rd;Trust Server Certificate=True"
      ConnectionStrings__Redis: "Diploma_Redis:6379,password=TwojeSuperHaslo"
      ConnectionStrings__Kafka: "Diploma_Kafka:9092"

      ConnectionStrings__MongoDb: "mongodb://myuser:mypassword@Diploma_MongoDb:27017/"
      ConnectionStrings__MongoDbDatabase: "DiplomaDB"

      Email__email: ""
      Email__password: ""
      Email__urlProfileActivation: "http://localhost:3000/activate"
      Email__urlResetPassword: "http://localhost:3000/resetPassword"
      Email__urlProfileRestore: "http://localhost:3000/restore"

  Diploma_MsSQL:
    container_name: Diploma_MsSQL
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - "1433:1433"
    restart: unless-stopped
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "YourStrong!Passw0rd"
      MSSQL_PID: "Developer" # Wersja developerska MSSQL

    # MSMS : localhost,1433
    # Copy File to Docker
    # docker cp "./Databases/MsSQL/DiplomaBD.bak" Diploma_MsSQL:/var/opt/mssql/data/DiplomaBD.bak
    # Copy File From Docker
    # docker cp Diploma_MsSQL:/var/opt/mssql/data/DiplomaBD.bak "./Databases/MsSQL/DiplomaBD.bak"
    # Remove file from docker
    # docker exec Diploma_MsSQL rm /var/opt/mssql/data/DiplomaBD.bak

  Diploma_MongoDb:
    container_name: Diploma_MongoDb
    image: mongo:latest
    ports:
      - "27017:27017"
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: myuser
      MONGO_INITDB_ROOT_PASSWORD: mypassword

  Diploma_Redis:
    container_name: Diploma_Redis
    image: redis:latest
    ports:
      - "6379:6379"
    restart: unless-stopped
    entrypoint:
      [
        "sh",
        "-c",
        "redis-server --maxmemory 100mb --maxmemory-policy allkeys-lru --requirepass $$REDIS_PASSWORD",
      ]
    environment:
      - REDIS_PASSWORD=TwojeSuperHaslo
    # noeviction      - Brak usuwania danych – jeśli limit pamięci zostanie osiągnięty, Redis zwróci błąd (domyślne zachowanie)
    # allkeys-lru     - usuwa najmniej używane klucze
    # volatile-lru	  - Usuwa najmniej używane klucze z czasem życia (TTL).
    # allkeys-random	- Usuwa losowe klucze.
    # volatile-random - Usuwa losowe klucze z TTL.
    # volatile-ttl    - Usuwa klucze z najkrótszym czasem życia (TTL).

  Diploma_Kafka_Zookeeper:
    container_name: Diploma_Kafka_Zookeeper
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  Diploma_Kafka:
    container_name: Diploma_Kafka
    image: confluentinc/cp-kafka:7.0.0
    ports:
      - "9092:9092"
      - "9093:9093"
    restart: unless-stopped
    depends_on:
      - Diploma_Kafka_Zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: Diploma_Kafka_Zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://Diploma_Kafka:9092,PLAINTEXT_HOST://localhost:9093"
      KAFKA_LISTENERS: "PLAINTEXT://Diploma_Kafka:9092,PLAINTEXT_HOST://0.0.0.0:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      
  Diploma_Frontend:
    container_name: Diploma_Frontend
    image: diploma_frontend:latest
    build:
      context: ./frontend
      dockerfile: ./dockerfile
      args: 
        NEXT_PUBLIC_GEOAPIFY_API: "a61d5a8ff24e4f6e8081e48d428b5994"
    ports:
      - "3000:3000"
    restart: unless-stopped
    environment:
        NEXTAUTH_SECRET:
        NEXTAUTH_URL: http://host.docker.internal:3000
        GEOAPIFY_API: "a61d5a8ff24e4f6e8081e48d428b5994"
        AUTH_SECRET: "jbS7iRw63xG2u8GYTjZAODHySPFlrnr8ry7IMRoqQXM="
    depends_on:
      - Diploma_BackEnd_Api

