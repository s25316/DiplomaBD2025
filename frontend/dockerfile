# 1. Base image
FROM node:22-alpine AS deps

# 2. Set working directory
WORKDIR /app

# 3. Copy package files and install only production dependencies
COPY package.json package-lock.json* pnpm-lock.yaml* yarn.lock* ./

RUN \
  if [ -f package-lock.json ]; then npm ci --legacy-peer-deps; \
  elif [ -f yarn.lock ]; then yarn install --frozen-lockfile; \
  elif [ -f pnpm-lock.yaml ]; then \
    npm install -g pnpm && pnpm install --frozen-lockfile; \
  fi

# 4. Build stage for the Next.js application
FROM node:22-alpine AS builder
#Copy the rest of the app and build
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# WAŻNE: Przekazanie zmiennej środowiskowej do etapu budowania
# ARG pobiera wartość z komendy docker build --build-arg lub z docker-compose.yml
ARG NEXT_PUBLIC_GEOAPIFY_API
# ENV ustawia tę wartość jako zmienną środowiskową dostępną podczas RUN npm run build
ENV NEXT_PUBLIC_GEOAPIFY_API=${NEXT_PUBLIC_GEOAPIFY_API}


ARG API_URL
ARG NEXT_PUBLIC_API_URL

ENV API_URL=$API_URL
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL

# Zbuduj aplikację Next.js
RUN npm run build

# 5. Final image for running the application
FROM node:22-alpine AS runner

WORKDIR /app

ENV NODE_ENV=production

# Copy only necessary files for runtime
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

# Expose port (default Next.js port)
EXPOSE 3000

# Run Next.js app
CMD ["npm", "start"]